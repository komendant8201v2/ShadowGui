-- ShadowGui Module (ShadowGui.lua)
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local ShadowGui = {}
ShadowGui.__index = ShadowGui

---------------------------
-- FUNKCJE POMOCNICZE --
---------------------------

-- Tween helper
local function Tween(obj, props, duration, easingStyle, easingDirection)
    duration = duration or 0.5
    easingStyle = easingStyle or Enum.EasingStyle.Quad
    easingDirection = easingDirection or Enum.EasingDirection.Out
    local tweenInfo = TweenInfo.new(duration, easingStyle, easingDirection)
    local tween = TweenService:Create(obj, tweenInfo, props)
    tween:Play()
    return tween
end

-- Dodaje UICorner do obiektu
local function AddUICorner(obj, cornerRadius)
    local uiCorner = Instance.new("UICorner", obj)
    uiCorner.CornerRadius = UDim.new(0, cornerRadius or 8)
end

-- Umożliwia przeciąganie obiektu
local function MakeDraggable(frame)
    local dragging, dragInput, dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    RunService.RenderStepped:Connect(function()
        if dragging and dragInput then
            update(dragInput)
        end
    end)
end

-- Funkcja wyświetlająca ekran powitalny (Splash) z napisem "ShadowGui"
local function ShowSplash(parent)
    local splash = Instance.new("Frame", parent)
    splash.Size = UDim2.new(1, 0, 1, 0)
    splash.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    splash.BackgroundTransparency = 0
    splash.ZIndex = 10
    AddUICorner(splash, 12)

    local splashLabel = Instance.new("TextLabel", splash)
    splashLabel.Size = UDim2.new(1, 0, 0, 100)
    splashLabel.Position = UDim2.new(0, 0, 0.5, -50)
    splashLabel.BackgroundTransparency = 1
    splashLabel.Text = "ShadowGui"
    splashLabel.TextColor3 = Color3.new(1,1,1)
    splashLabel.TextScaled = true
    splashLabel.Font = Enum.Font.GothamBold

    -- Efekt pojawiania się
    Tween(splashLabel, {TextTransparency = 0}, 0.5)
    wait(1.5)
    Tween(splash, {BackgroundTransparency = 1}, 0.75)
    wait(0.8)
    splash:Destroy()
end

-- Funkcja wyświetlająca okno z systemem klucza, jeżeli KeySystem = true.
-- Funkcja blokuje działanie i zwraca true po poprawnej walidacji.
local function ShowKeySystem(parent, keySettings)
    local keyPrompt = Instance.new("Frame", parent)
    keyPrompt.Size = UDim2.new(0, 300, 0, 150)
    keyPrompt.Position = UDim2.new(0.5, -150, 0.5, -75)
    keyPrompt.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    keyPrompt.BorderSizePixel = 0
    keyPrompt.ZIndex = 11
    AddUICorner(keyPrompt, 12)

    local title = Instance.new("TextLabel", keyPrompt)
    title.Size = UDim2.new(1, 0, 0, 40)
    title.BackgroundTransparency = 1
    title.Text = keySettings.Title or "Key System"
    title.TextColor3 = Color3.new(1,1,1)
    title.Font = Enum.Font.GothamBold
    title.TextScaled = true

    local subtitle = Instance.new("TextLabel", keyPrompt)
    subtitle.Size = UDim2.new(1, 0, 0, 20)
    subtitle.Position = UDim2.new(0, 0, 0, 40)
    subtitle.BackgroundTransparency = 1
    subtitle.Text = keySettings.Subtitle or "Enter your key"
    subtitle.TextColor3 = Color3.new(1,1,1)
    subtitle.Font = Enum.Font.Gotham
    subtitle.TextScaled = true

    local keyBox = Instance.new("TextBox", keyPrompt)
    keyBox.Size = UDim2.new(0, 200, 0, 30)
    keyBox.Position = UDim2.new(0.5, -100, 0, 70)
    keyBox.PlaceholderText = "Enter key..."
    keyBox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    keyBox.TextColor3 = Color3.new(1,1,1)
    keyBox.Font = Enum.Font.Gotham
    keyBox.TextScaled = true
    AddUICorner(keyBox, 6)

    local submit = Instance.new("TextButton", keyPrompt)
    submit.Size = UDim2.new(0, 100, 0, 30)
    submit.Position = UDim2.new(0.5, -50, 0, 110)
    submit.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    submit.Text = "Submit"
    submit.TextColor3 = Color3.new(1,1,1)
    submit.Font = Enum.Font.GothamBold
    submit.TextScaled = true
    AddUICorner(submit, 6)

    local validated = false
    submit.MouseButton1Click:Connect(function()
        local inputKey = keyBox.Text or ""
        for _, validKey in ipairs(keySettings.Key or {}) do
            if inputKey == validKey then
                validated = true
                break
            end
        end
        if validated then
            Tween(keyPrompt, {BackgroundTransparency = 1}, 0.5)
            wait(0.6)
            keyPrompt:Destroy()
        else
            -- Opcjonalnie można dodać komunikat o błędzie
            keyBox.Text = ""
            keyBox.PlaceholderText = "Invalid key, try again!"
        end
    end)

    -- Pętla oczekująca na walidację
    repeat wait() until validated
    return true
end

---------------------------
-- GŁÓWNA FUNKCJA GUI --
---------------------------

function ShadowGui:CreateWindow(config)
    config = config or {}
    
    local window = Instance.new("ScreenGui")
    window.Name = config.Name or "ShadowGuiWindow"
    window.Parent = game.CoreGui  -- lub PlayerGui

    -- Wyświetl splash screen
    ShowSplash(window)

    -- Jeśli KeySystem = true, wyświetl okno klucza
    if config.KeySystem then
        ShowKeySystem(window, config.KeySettings or {})
    end

    -- Główna ramka interfejsu z animowanym wejściem
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 600, 0, 400)
    frame.Position = UDim2.new(0.5, -300, 0.5, -200)
    frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    frame.BorderSizePixel = 0
    frame.Parent = window
    AddUICorner(frame, 12)

    local gradient = Instance.new("UIGradient", frame)
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(30, 30, 30))
    })

    -- Ustawienie przeciągania głównego okna
    MakeDraggable(frame)

    -- Pasek tytułowy z ikoną, gradientem oraz UICorner
    local topBar = Instance.new("Frame", frame)
    topBar.Size = UDim2.new(1, 0, 0, 50)
    topBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    topBar.BorderSizePixel = 0
    AddUICorner(topBar, 12)

    local topGradient = Instance.new("UIGradient", topBar)
    topGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(60, 60, 60)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(50, 50, 50))
    })

    if config.Icon and config.Icon ~= 0 then
        local icon = Instance.new("ImageLabel", topBar)
        icon.Size = UDim2.new(0, 40, 0, 40)
        icon.Position = UDim2.new(0, 5, 0, 5)
        if type(config.Icon) == "number" then
            icon.Image = "rbxassetid://"..tostring(config.Icon)
        else
            icon.Image = config.Icon
        end
        icon.BackgroundTransparency = 1
        AddUICorner(icon, 8)
    end

    local titleLabel = Instance.new("TextLabel", topBar)
    titleLabel.Size = config.Icon and (config.Icon ~= 0 and UDim2.new(1, -50, 1, 0) or UDim2.new(1, 0, 1, 0)) or UDim2.new(1, 0, 1, 0)
    titleLabel.Position = config.Icon and (config.Icon ~= 0 and UDim2.new(0, 50, 0, 0) or UDim2.new(0, 0, 0, 0)) or UDim2.new(0,0,0,0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = config.Name or "ShadowGui"
    titleLabel.TextColor3 = Color3.new(1,1,1)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.GothamBold

    -- Kontenery na zakładki i zawartość
    local tabContainer = Instance.new("Frame", frame)
    tabContainer.Size = UDim2.new(1, 0, 0, 30)
    tabContainer.Position = UDim2.new(0, 0, 0, 50)
    tabContainer.BackgroundTransparency = 1

    local contentContainer = Instance.new("Frame", frame)
    contentContainer.Size = UDim2.new(1, 0, 1, -80)
    contentContainer.Position = UDim2.new(0, 0, 0, 80)
    contentContainer.BackgroundTransparency = 1

    -- Funkcjonalność powiadomień z animacją slide-in/out i UICorner
    local Notifications = {}
    function Notifications:Send(title, text, duration)
        duration = duration or 5
        local notification = Instance.new("Frame", window)
        notification.Size = UDim2.new(0, 300, 0, 50)
        notification.Position = UDim2.new(1, 310, 0, 10)
        notification.BackgroundColor3 = Color3.fromRGB(50,50,50)
        notification.BackgroundTransparency = 0.2
        notification.BorderSizePixel = 0
        AddUICorner(notification, 8)

        local nTitle = Instance.new("TextLabel", notification)
        nTitle.Size = UDim2.new(1,0,0,25)
        nTitle.BackgroundTransparency = 1
        nTitle.Text = title
        nTitle.TextColor3 = Color3.new(1,1,1)
        nTitle.TextScaled = true
        nTitle.Font = Enum.Font.GothamBold

        local nText = Instance.new("TextLabel", notification)
        nText.Size = UDim2.new(1,0,0,25)
        nText.Position = UDim2.new(0,0,0,25)
        nText.BackgroundTransparency = 1
        nText.Text = text
        nText.TextColor3 = Color3.new(1,1,1)
        nText.TextScaled = true
        nText.Font = Enum.Font.Gotham

        Tween(notification, {Position = UDim2.new(1, -310, 0, 10)}, 0.5)

        delay(duration, function()
            Tween(notification, {Position = UDim2.new(1, 310, 0, 10)}, 0.5)
            wait(0.6)
            notification:Destroy()
        end)
    end

    local guiObject = {
        Window = window,
        Frame = frame,
        TabContainer = tabContainer,
        ContentContainer = contentContainer,
        Notifications = Notifications,
        Tabs = {},
        ActiveTab = nil,
        TabButtonWidth = 100,  -- domyślna szerokość przycisku zakładki
        Config = config
    }
    setmetatable(guiObject, ShadowGui)
    return guiObject
end

---------------------------
-- FUNKCJE ELEMENTÓW --
---------------------------

-- Dodawanie zakładki (Tab) z animacją i UICorner
function ShadowGui:AddTab(config)
    config = config or {}
    local tabName = config.Name or "Tab"
    
    local tabButton = Instance.new("TextButton")
    tabButton.Size = UDim2.new(0, self.TabButtonWidth, 1, 0)
    tabButton.BackgroundColor3 = Color3.fromRGB(50,50,50)
    tabButton.Text = tabName
    tabButton.TextColor3 = Color3.new(1,1,1)
    tabButton.Font = Enum.Font.Gotham
    tabButton.TextSize = 20
    tabButton.BorderSizePixel = 0
    tabButton.Parent = self.TabContainer
    AddUICorner(tabButton, 6)

    local tabCount = #self.Tabs
    tabButton.Position = UDim2.new(0, tabCount * self.TabButtonWidth, 0, 0)
    
    Tween(tabButton, {BackgroundColor3 = Color3.fromRGB(55,55,55)}, 0.3)

    local tabContent = Instance.new("Frame", self.ContentContainer)
    tabContent.Size = UDim2.new(1, 0, 1, 0)
    tabContent.BackgroundTransparency = 1
    tabContent.Visible = false
    AddUICorner(tabContent, 8)

    local tabData = {
        Name = tabName,
        Button = tabButton,
        Content = tabContent,
        Elements = {},
        NextElementY = 10
    }
    table.insert(self.Tabs, tabData)

    tabButton.MouseButton1Click:Connect(function()
        for _, tab in ipairs(self.Tabs) do
            Tween(tab.Content, {BackgroundTransparency = 1}, 0.3)
            tab.Content.Visible = false
            Tween(tab.Button, {BackgroundColor3 = Color3.fromRGB(50,50,50)}, 0.3)
        end
        tabContent.Visible = true
        Tween(tabContent, {BackgroundTransparency = 0}, 0.3)
        Tween(tabButton, {BackgroundColor3 = Color3.fromRGB(70,70,70)}, 0.3)
        self.ActiveTab = tabData
    end)

    if #self.Tabs == 1 then
        tabContent.Visible = true
        Tween(tabContent, {BackgroundTransparency = 0}, 0.3)
        Tween(tabButton, {BackgroundColor3 = Color3.fromRGB(70,70,70)}, 0.3)
        self.ActiveTab = tabData
    end

    return tabData
end

-- Dodawanie przycisku do zakładki z animacją i UICorner
function ShadowGui:AddButton(tabData, config, callback)
    config = config or {}
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, config.SizeX or 150, 0, config.SizeY or 40)
    button.Position = UDim2.new(0, 10, 0, tabData.NextElementY)
    button.BackgroundColor3 = config.BackgroundColor or Color3.fromRGB(60,60,60)
    button.Text = config.Text or "Button"
    button.TextColor3 = config.TextColor or Color3.new(1,1,1)
    button.Font = Enum.Font.Gotham
    button.TextSize = 20
    button.BorderSizePixel = 0
    button.Parent = tabData.Content
    AddUICorner(button, 6)

    button.MouseButton1Click:Connect(function()
        Tween(button, {BackgroundColor3 = Color3.fromRGB(80,80,80)}, 0.1)
        wait(0.1)
        Tween(button, {BackgroundColor3 = config.BackgroundColor or Color3.fromRGB(60,60,60)}, 0.1)
        if callback then callback() end
    end)
    
    tabData.NextElementY = tabData.NextElementY + (config.SizeY or 40) + 10
    table.insert(tabData.Elements, button)
end

-- Dodawanie przełącznika (Toggle) do zakładki z animacją i UICorner
function ShadowGui:AddToggle(tabData, config, callback)
    config = config or {}
    local toggle = Instance.new("TextButton")
    toggle.Size = UDim2.new(0, config.SizeX or 150, 0, config.SizeY or 40)
    toggle.Position = UDim2.new(0, 10, 0, tabData.NextElementY)
    toggle.BackgroundColor3 = config.BackgroundColor or Color3.fromRGB(60,60,60)
    local state = false
    toggle.Text = (config.Text or "Toggle") .. " [" .. tostring(state) .. "]"
    toggle.TextColor3 = config.TextColor or Color3.new(1,1,1)
    toggle.Font = Enum.Font.Gotham
    toggle.TextSize = 20
    toggle.BorderSizePixel = 0
    toggle.Parent = tabData.Content
    AddUICorner(toggle, 6)

    toggle.MouseButton1Click:Connect(function()
        state = not state
        Tween(toggle, {BackgroundColor3 = Color3.fromRGB(80,80,80)}, 0.1)
        wait(0.1)
        Tween(toggle, {BackgroundColor3 = config.BackgroundColor or Color3.fromRGB(60,60,60)}, 0.1)
        toggle.Text = (config.Text or "Toggle") .. " [" .. tostring(state) .. "]"
        if callback then callback(state) end
    end)
    
    tabData.NextElementY = tabData.NextElementY + (config.SizeY or 40) + 10
    table.insert(tabData.Elements, toggle)
end

return ShadowGui
